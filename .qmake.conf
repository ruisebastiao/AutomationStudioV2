
# This file contains the global definitions and the bootstrapping
# for the whole project build process
#
# Only modify if you are 100% sure what you are doing


# All source files are in the SOURCE tree,
# the intermediate build files are in the BUILD tree
# and the final product goes to the DEPLOY tree
#
# Since it is highly advisable to use a shadow build configuration,
# we should not mess with the build directory at all, thats qmake's domain.

PROJECT_ROOT = $$PWD
BUILD_PATH   = $$shadowed($$PWD)

macx:DEPLOY_PATH = $$BUILD_PATH/bin/AutomationStudio.app/Contents
else:DEPLOY_PATH = $$BUILD_PATH/bin

unix:DEPLOY_PATH = $$BUILD_PATH/bin

macx:LIBRARY_DEPLOY_PATH = $$DEPLOY_PATH/Frameworks/AutomationStudio.framework/Libraries
else:LIBRARY_DEPLOY_PATH = $$DEPLOY_PATH

macx:PLUGIN_DEPLOY_PATH = $$DEPLOY_PATH/PlugIns
else:PLUGIN_DEPLOY_PATH = $$DEPLOY_PATH/plugins

CONFIG_DIR  = $$PROJECT_ROOT/config
PROJECT_DIR = $$PROJECT_ROOT/project

# --- Functions required for easier bootstrapping ---
# Determines the path to the requested config file and returns it for use with
# include(...)
# Should the config file not exist, an error is produced and the build is
# aborted.
#
# Example:
# include($$getConfigFile(config_foo.pri))

defineReplace(getConfigFile){
    FILE = $$CONFIG_DIR/$$1
    !exists($$FILE): error(Missing config file $$FILE)
    return($$FILE)
}

# --- Functions required for easier bootstrapping ---
# Determines the path to the requested project file and returns it for use with
# include(...)
# Should the config file not exist, an error is produced and the build is
# aborted.
#
# Example:
# include($$getConfigFile(config_foo.pri))
#
defineReplace(getGlobalFile){
    FILE = $$PROJECT_DIR/$$1
    !exists($$FILE): error(Missing project file $$FILE)
    return($$FILE)
}

# --- Using C++ 11 ---

CONFIG *= c++14

# --- Bootstrapping utility functions and paths that are required globally---

include($$PROJECT_DIR/functions.pri)
