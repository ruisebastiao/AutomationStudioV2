import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -v -nonrelocatable automationmodule 1.0'

Module {
    dependencies: ["QtQuick 2.3"]
    Component {
        name: "BarcodeReaderNode"
        prototype: "FlowNode"
        exports: ["automationmodule/BarcodeReaderNode 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "triggerEnabled"; type: "bool" }
        Property { name: "port"; type: "string" }
        Property { name: "prefix"; type: "string" }
        Property { name: "suffix"; type: "string" }
        Property { name: "opened"; type: "bool" }
        Property { name: "dataout"; type: "string" }
        Property { name: "dataoutPort"; type: "FlowNodePort"; isPointer: true }
        Property { name: "portsAvailable"; type: "QStringList"; isReadonly: true }
        Property { name: "trigger"; type: "bool" }
        Signal {
            name: "triggerEnabledChanged"
            Parameter { name: "triggerEnabled"; type: "bool" }
        }
        Signal {
            name: "portChanged"
            Parameter { name: "port"; type: "string" }
        }
        Signal {
            name: "openedChanged"
            Parameter { name: "opened"; type: "bool" }
        }
        Signal {
            name: "triggerChanged"
            Parameter { name: "trigger"; type: "bool" }
        }
        Signal {
            name: "portsAvailableChanged"
            Parameter { name: "portsAvailable"; type: "QStringList" }
        }
        Signal {
            name: "dataoutChanged"
            Parameter { name: "dataout"; type: "string" }
        }
        Signal {
            name: "prefixChanged"
            Parameter { name: "prefix"; type: "string" }
        }
        Signal {
            name: "suffixChanged"
            Parameter { name: "suffix"; type: "string" }
        }
        Signal {
            name: "dataoutPortChanged"
            Parameter { name: "dataoutPort"; type: "FlowNodePort"; isPointer: true }
        }
        Method {
            name: "setTriggerEnabled"
            Parameter { name: "triggerEnabled"; type: "bool" }
        }
        Method {
            name: "setPort"
            Parameter { name: "port"; type: "string" }
        }
        Method {
            name: "setOpened"
            Parameter { name: "opened"; type: "bool" }
        }
        Method {
            name: "setTrigger"
            Parameter { name: "trigger"; type: "bool" }
        }
        Method {
            name: "setDataout"
            Parameter { name: "dataout"; type: "string" }
        }
        Method {
            name: "setPrefix"
            Parameter { name: "prefix"; type: "string" }
        }
        Method {
            name: "setSuffix"
            Parameter { name: "suffix"; type: "string" }
        }
        Method {
            name: "setDataoutPortPort"
            Parameter { name: "dataoutPort"; type: "FlowNodePort"; isPointer: true }
        }
    }
    Component {
        name: "FlowNode"
        prototype: "qan::Node"
        exports: ["automationmodule/FlowNode 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "NodeNone": 0,
                "BarcodeReaderNode": 1,
                "WebServiceNode": 2,
                "BSValidationNode": 3,
                "IDSCaptureNode": 4,
                "FrameViewerNode": 5,
                "SetResetNode": 6,
                "ProxyInputNode": 7,
                "VisionSystemNode": 8,
                "FileCaptureNode": 9,
                "ROINode": 10,
                "ProcessingNode": 11,
                "ProcessingThresholdNode": 12,
                "ObjectPropertyNode": 13,
                "ProcessingContoursNode": 14,
                "ProcessingShapesNode": 15,
                "WebCamCaptureNode": 16
            }
        }
        Property { name: "type"; type: "Type"; isReadonly: true }
        Property { name: "name"; type: "string" }
        Property { name: "configsLoaded"; type: "bool" }
        Property { name: "id"; type: "int" }
        Property { name: "normalWidth"; type: "int" }
        Property { name: "normalHeight"; type: "int" }
        Property { name: "editWidth"; type: "int" }
        Property { name: "editHeight"; type: "int" }
        Property { name: "nodeX"; type: "double" }
        Property { name: "nodeY"; type: "double" }
        Property { name: "editMode"; type: "bool" }
        Property { name: "locked"; type: "bool" }
        Property { name: "centerOnEdit"; type: "bool" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "bindPortLabelToProperty"
            Parameter { name: "portItem"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "nodeProperty"; type: "string" }
        }
        Signal {
            name: "bindSourceProperty"
            Parameter { name: "sourceNode"; type: "qan::Node"; isPointer: true }
            Parameter { name: "sourceProperty"; type: "string" }
            Parameter { name: "targetProperty"; type: "string" }
        }
        Signal {
            name: "unbindSourceProperty"
            Parameter { name: "targetProperty"; type: "string" }
        }
        Signal {
            name: "bindPropertyToTarget"
            Parameter { name: "sourceproperty"; type: "string" }
            Parameter { name: "target"; type: "QObject"; isPointer: true }
            Parameter { name: "targetproperty"; type: "string" }
        }
        Signal {
            name: "configsLoadedChanged"
            Parameter { name: "configsLoaded"; type: "bool" }
        }
        Signal {
            name: "idChanged"
            Parameter { name: "id"; type: "int" }
        }
        Signal {
            name: "editWidthChanged"
            Parameter { name: "editWidth"; type: "int" }
        }
        Signal {
            name: "editHeightChanged"
            Parameter { name: "editHeight"; type: "int" }
        }
        Signal {
            name: "editModeChanged"
            Parameter { name: "editMode"; type: "bool" }
        }
        Signal {
            name: "normalWidthChanged"
            Parameter { name: "normalWidth"; type: "int" }
        }
        Signal {
            name: "normalHeightChanged"
            Parameter { name: "normalHeight"; type: "int" }
        }
        Signal {
            name: "lockedChanged"
            Parameter { name: "locked"; type: "bool" }
        }
        Signal {
            name: "nodeXChanged"
            Parameter { name: "nodeX"; type: "double" }
        }
        Signal {
            name: "nodeYChanged"
            Parameter { name: "nodeY"; type: "double" }
        }
        Signal {
            name: "centerOnEditChanged"
            Parameter { name: "centerOnEdit"; type: "bool" }
        }
        Method { name: "inNodeOutputChanged" }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setConfigsLoaded"
            Parameter { name: "configsLoaded"; type: "bool" }
        }
        Method {
            name: "setEditWidth"
            Parameter { name: "editWidth"; type: "int" }
        }
        Method {
            name: "setEditHeight"
            Parameter { name: "editHeight"; type: "int" }
        }
        Method {
            name: "setEditMode"
            Parameter { name: "editMode"; type: "bool" }
        }
        Method {
            name: "setNormalWidth"
            Parameter { name: "normalWidth"; type: "int" }
        }
        Method {
            name: "setNormalHeight"
            Parameter { name: "normalHeight"; type: "int" }
        }
        Method {
            name: "setLocked"
            Parameter { name: "locked"; type: "bool" }
        }
        Method {
            name: "setNodeX"
            Parameter { name: "nodeX"; type: "double" }
        }
        Method {
            name: "setNodeY"
            Parameter { name: "nodeY"; type: "double" }
        }
        Method {
            name: "setCenterOnEdit"
            Parameter { name: "centerOnEdit"; type: "bool" }
        }
    }
    Component {
        name: "Project"
        prototype: "QObject"
        exports: ["automationmodule/Project 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "isDefault"; type: "bool" }
        Property { name: "modules"; type: "ModuleListModel"; isPointer: true }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "isDefaultChanged"
            Parameter { name: "isDefault"; type: "bool" }
        }
        Signal {
            name: "modulesChanged"
            Parameter { name: "modules"; type: "ModuleListModel"; isPointer: true }
        }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setIsDefault"
            Parameter { name: "isDefault"; type: "bool" }
        }
        Method {
            name: "setModules"
            Parameter { name: "modules"; type: "ModuleListModel"; isPointer: true }
        }
    }
    Component {
        name: "QAutomationModule"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["automationmodule/AutomationModule 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ModuleType"
            values: {
                "AutomationModule": 0,
                "EpsonRobotModule": 1,
                "VisionSystemModule": 2,
                "BSValidationModule": 3,
                "ClockModule": 4
            }
        }
        Property { name: "moduleID"; type: "string" }
        Property { name: "name"; type: "string" }
        Property { name: "editMode"; type: "bool" }
        Property { name: "moduleLoaded"; type: "bool" }
        Property { name: "type"; type: "ModuleType" }
        Property { name: "graphView"; type: "qan::GraphView"; isPointer: true }
        Property { name: "configSource"; type: "string" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "moduleconfigChanged"
            Parameter { name: "moduleconfig"; type: "string" }
        }
        Signal {
            name: "moduleLoadedChanged"
            Parameter { name: "moduleLoaded"; type: "bool" }
        }
        Signal {
            name: "editModeChanged"
            Parameter { name: "editMode"; type: "bool" }
        }
        Signal {
            name: "sceneChanged"
            Parameter { name: "scene"; type: "SceneGraph"; isPointer: true }
        }
        Signal {
            name: "graphViewChanged"
            Parameter { name: "graphView"; type: "qan::GraphView"; isPointer: true }
        }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "ModuleType" }
        }
        Signal {
            name: "moduleIDChanged"
            Parameter { name: "moduleID"; type: "string" }
        }
        Signal {
            name: "configSourceChanged"
            Parameter { name: "configSource"; type: "string" }
        }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setModuleLoaded"
            Parameter { name: "moduleLoaded"; type: "bool" }
        }
        Method {
            name: "setEditMode"
            Parameter { name: "editMode"; type: "bool" }
        }
        Method {
            name: "setGraphView"
            Parameter { name: "graphView"; type: "qan::GraphView"; isPointer: true }
        }
        Method {
            name: "setType"
            Parameter { name: "type"; type: "ModuleType" }
        }
        Method {
            name: "setModuleID"
            Parameter { name: "moduleID"; type: "string" }
        }
        Method {
            name: "setConfigSource"
            Parameter { name: "configSource"; type: "string" }
        }
        Method { name: "save" }
    }
    Component {
        name: "SceneGraph"
        defaultProperty: "data"
        prototype: "qan::Graph"
        exports: ["automationmodule/SceneGraph 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "onConnectorRequestEdgeCreation"
            Parameter { name: "src"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dst"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "deleteEdge"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
        }
    }
    Component {
        name: "User"
        prototype: "QObject"
        exports: ["automationmodule/User 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UserRole"
            values: {
                "ProductionRole": 0,
                "AdminRole": 1
            }
        }
        Property { name: "name"; type: "string" }
        Property { name: "role"; type: "UserRole" }
        Property { name: "pin"; type: "string" }
        Property { name: "isDefault"; type: "bool" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "roleChanged"
            Parameter { name: "role"; type: "UserRole" }
        }
        Signal {
            name: "isDefaultChanged"
            Parameter { name: "isDefault"; type: "bool" }
        }
        Signal {
            name: "pinChanged"
            Parameter { name: "pin"; type: "string" }
        }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setRole"
            Parameter { name: "role"; type: "string" }
        }
        Method {
            name: "setRole"
            Parameter { name: "role"; type: "UserRole" }
        }
        Method {
            name: "setIsDefault"
            Parameter { name: "isDefault"; type: "bool" }
        }
        Method {
            name: "setPin"
            Parameter { name: "pin"; type: "string" }
        }
    }
    Component {
        name: "qan::Graph"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Enum {
            name: "SelectionPolicy"
            values: {
                "NoSelection": 0,
                "SelectOnClick": 1,
                "SelectOnCtrlClick": 2
            }
        }
        Property { name: "containerItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "connectorEdgeColor"; type: "QColor" }
        Property { name: "connectorColor"; type: "QColor" }
        Property { name: "connectorHEdgeEnabled"; type: "bool" }
        Property { name: "connectorCreateDefaultEdge"; type: "bool" }
        Property { name: "connectorItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "connectorEnabled"; type: "bool" }
        Property { name: "connector"; type: "qan::Connector"; isReadonly: true; isPointer: true }
        Property { name: "nodeDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "edgeDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "groupDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "selectionDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "nodes"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "edges"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "selectionPolicy"; type: "SelectionPolicy" }
        Property { name: "selectionColor"; type: "QColor" }
        Property { name: "selectionWeight"; type: "double" }
        Property { name: "selectionMargin"; type: "double" }
        Property { name: "selectedNodes"; type: "QAbstractListModel"; isReadonly: true; isPointer: true }
        Property { name: "selectedNode"; type: "qan::Node"; isPointer: true }
        Property { name: "styleManager"; type: "qan::StyleManager"; isReadonly: true; isPointer: true }
        Property { name: "portDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "horizontalDockDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "verticalDockDelegate"; type: "QQmlComponent"; isPointer: true }
        Signal {
            name: "connectorRequestEdgeCreation"
            Parameter { name: "src"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dst"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "connectorEdgeInserted"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
        }
        Signal {
            name: "connectorRequestPortEdgeCreation"
            Parameter { name: "src"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "dst"; type: "qan::PortItem"; isPointer: true }
        }
        Signal {
            name: "nodeClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "nodeRightClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "nodeDoubleClicked"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeRightClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "edgeDoubleClicked"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupRightClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "groupDoubleClicked"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "rightClicked"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "portClicked"
            Parameter { name: "port"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "portRightClicked"
            Parameter { name: "port"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Signal {
            name: "selectedNodeChanged"
            Parameter { name: "selectedNode"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "setSelectedNode"
            Parameter { name: "selectedNode"; type: "qan::Node"; isPointer: true }
        }
        Method { name: "qmlClearGraph" }
        Method {
            name: "graphChildAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "groupAt"
            type: "qan::Group*"
            Parameter { name: "p"; type: "QPointF" }
            Parameter { name: "s"; type: "QSizeF" }
        }
        Method {
            name: "setConnectorSource"
            Parameter { name: "sourceNode"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "insertNode"
            type: "qan::Node*"
            Parameter { name: "nodeComponent"; type: "QQmlComponent"; isPointer: true }
        }
        Method { name: "insertNode"; type: "qan::Node*" }
        Method {
            name: "removeNode"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
        }
        Method { name: "getNodeCount"; type: "int" }
        Method {
            name: "insertEdge"
            type: "qan::Edge*"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
            Parameter { name: "destination"; type: "QObject"; isPointer: true }
            Parameter { name: "edgeComponent"; type: "QQmlComponent"; isPointer: true }
        }
        Method {
            name: "insertEdge"
            type: "qan::Edge*"
            Parameter { name: "source"; type: "QObject"; isPointer: true }
            Parameter { name: "destination"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "bindEdgeSource"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "outPort"; type: "qan::PortItem"; isPointer: true }
        }
        Method {
            name: "bindEdgeDestination"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "inPort"; type: "qan::PortItem"; isPointer: true }
        }
        Method {
            name: "bindEdge"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
            Parameter { name: "outPort"; type: "qan::PortItem"; isPointer: true }
            Parameter { name: "inPort"; type: "qan::PortItem"; isPointer: true }
        }
        Method {
            name: "removeEdge"
            Parameter { name: "source"; type: "qan::Node"; isPointer: true }
            Parameter { name: "destination"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "removeEdge"
            Parameter { name: "edge"; type: "qan::Edge"; isPointer: true }
        }
        Method {
            name: "hasEdge"
            type: "bool"
            Parameter { name: "source"; type: "qan::Node"; isPointer: true }
            Parameter { name: "destination"; type: "qan::Node"; isPointer: true }
        }
        Method { name: "insertGroup"; type: "qan::Group*" }
        Method {
            name: "removeGroup"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
        }
        Method { name: "getGroupCount"; type: "int" }
        Method {
            name: "groupNode"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "transformPosition"; type: "bool" }
        }
        Method {
            name: "groupNode"
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "ungroupNode"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "group"; type: "qan::Group"; isPointer: true }
        }
        Method {
            name: "ungroupNode"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
        }
        Method {
            name: "insertPort"
            type: "qan::PortItem*"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dock"; type: "qan::NodeItem::Dock" }
            Parameter { name: "portType"; type: "qan::PortItem::Type" }
            Parameter { name: "label"; type: "string" }
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "insertPort"
            type: "qan::PortItem*"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dock"; type: "qan::NodeItem::Dock" }
            Parameter { name: "portType"; type: "qan::PortItem::Type" }
            Parameter { name: "label"; type: "string" }
        }
        Method {
            name: "insertPort"
            type: "qan::PortItem*"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dock"; type: "qan::NodeItem::Dock" }
            Parameter { name: "portType"; type: "qan::PortItem::Type" }
        }
        Method {
            name: "insertPort"
            type: "qan::PortItem*"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "dock"; type: "qan::NodeItem::Dock" }
        }
        Method {
            name: "removePort"
            Parameter { name: "node"; type: "qan::Node"; isPointer: true }
            Parameter { name: "port"; type: "qan::PortItem"; isPointer: true }
        }
        Method { name: "autoPositionNodes" }
    }
    Component {
        name: "qan::Node"
        prototype: "QObject"
        Property { name: "graph"; type: "qan::Graph"; isReadonly: true; isPointer: true }
        Property { name: "item"; type: "qan::NodeItem"; isReadonly: true; isPointer: true }
        Property { name: "inNodes"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "outNodes"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "outEdges"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "label"; type: "string" }
        Property { name: "group"; type: "qan::Group"; isReadonly: true; isPointer: true }
    }
}
